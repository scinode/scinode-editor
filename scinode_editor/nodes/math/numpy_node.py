

import bpy
from scinode_editor.nodes.base_node import ScinodeTreeNode, update_sockets

func_items = [
  ("abs", "abs", "", 0 ),
  ("absolute", "absolute", "", 1 ),
  ("add", "add", "", 2 ),
  ("all", "all", "", 7 ),
  ("allclose", "allclose", "", 8 ),
  ("alltrue", "alltrue", "", 9 ),
  ("amax", "amax", "", 10 ),
  ("amin", "amin", "", 11 ),
  ("angle", "angle", "", 12 ),
  ("any", "any", "", 13 ),
  ("append", "append", "", 14 ),
  ("arange", "arange", "", 17 ),
  ("arccos", "arccos", "", 18 ),
  ("arcsin", "arcsin", "", 20 ),
  ("arctan", "arctan", "", 22 ),
  ("arctan2", "arctan2", "", 23 ),
  ("argmax", "argmax", "", 25 ),
  ("argmin", "argmin", "", 26 ),
  ("ort", "ort", "", 28 ),
  ("argwhere", "argwhere", "", 29 ),
  ("around", "around", "", 30 ),
  ("array", "array", "", 31 ),
  ("asarray", "asarray", "", 39 ),
  ("asmatrix", "asmatrix", "", 44 ),
  ("asscalar", "asscalar", "", 45 ),
  ("atleast_1d", "atleast_1d", "", 46 ),
  ("atleast_2d", "atleast_2d", "", 47 ),
  ("atleast_3d", "atleast_3d", "", 48 ),
  ("average", "average", "", 49 ),
  ("bincount", "bincount", "", 53 ),
  ("bool", "bool", "", 61 ),
  ("broadcast", "broadcast", "", 64 ),
  ("ceil", "ceil", "", 77 ),
  ("character", "character", "", 79 ),
  ("chararray", "chararray", "", 80 ),
  ("choose", "choose", "", 81 ),
  ("clip", "clip", "", 82 ),
  ("compare_chararrays", "compare_chararrays", "", 87 ),
  ("complex", "complex", "", 88 ),
  ("compress", "compress", "", 94 ),
  ("concatenate", "concatenate", "", 95 ),
  ("conj", "conj", "", 96 ),
  ("conjugate", "conjugate", "", 97 ),
  ("convolve", "convolve", "", 98 ),
  ("corrcoef", "corrcoef", "", 102 ),
  ("correlate", "correlate", "", 103 ),
  ("cos", "cos", "", 104 ),
  ("cosh", "cosh", "", 105 ),
  ("count_nonzero", "count_nonzero", "", 106 ),
  ("cov", "cov", "", 107 ),
  ("cross", "cross", "", 108 ),
  ("deg2rad", "deg2rad", "", 116 ),
  ("degrees", "degrees", "", 117 ),
  ("delete", "delete", "", 118 ),
  ("diag", "diag", "", 121 ),
  ("diag_indices", "diag_indices", "", 122 ),
  ("diag_indices_from", "diag_indices_from", "", 123 ),
  ("diagflat", "diagflat", "", 124 ),
  ("diagonal", "diagonal", "", 125 ),
  ("diff", "diff", "", 126 ),
  ("digitize", "digitize", "", 127 ),
  ("disp", "disp", "", 128 ),
  ("divide", "divide", "", 129 ),
  ("divmod", "divmod", "", 130 ),
  ("dot", "dot", "", 131 ),
  ("double", "double", "", 132 ),
  ("dstack", "dstack", "", 134 ),
  ("dtype", "dtype", "", 135 ),
  ("einsum", "einsum", "", 137 ),
  ("einsum_path", "einsum_path", "", 138 ),
  ("empty", "empty", "", 139 ),
  ("empty_like", "empty_like", "", 140 ),
  ("equal", "equal", "", 141 ),
  ("exp", "exp", "", 143 ),
  ("exp2", "exp2", "", 144 ),
  ("expand_dims", "expand_dims", "", 145 ),
  ("expm1", "expm1", "", 146 ),
  ("extract", "extract", "", 147 ),
  ("eye", "eye", "", 148 ),
  ("fabs", "fabs", "", 149 ),
  ("fill_diagonal", "fill_diagonal", "", 151 ),
  ("find_common_type", "find_common_type", "", 152 ),
  ("fix", "fix", "", 154 ),
  ("flatiter", "flatiter", "", 155 ),
  ("flatnonzero", "flatnonzero", "", 156 ),
  ("flexible", "flexible", "", 157 ),
  ("flip", "flip", "", 158 ),
  ("fliplr", "fliplr", "", 159 ),
  ("flipud", "flipud", "", 160 ),
  ("float", "float", "", 161 ),
  ("float_power", "float_power", "", 167 ),
  ("floating", "floating", "", 168 ),
  ("floor", "floor", "", 169 ),
  ("floor_divide", "floor_divide", "", 170 ),
  ("fmax", "fmax", "", 171 ),
  ("fmin", "fmin", "", 172 ),
  ("fmod", "fmod", "", 173 ),
  ("frexp", "frexp", "", 177 ),
  ("fromstring", "fromstring", "", 184 ),
  ("full", "full", "", 185 ),
  ("full_like", "full_like", "", 186 ),
  ("fv", "fv", "", 187 ),
  ("gcd", "gcd", "", 188 ),
  ("genfromtxt", "genfromtxt", "", 190 ),
  ("gradient", "gradient", "", 199 ),
  ("greater", "greater", "", 200 ),
  ("greater_equal", "greater_equal", "", 201 ),
  ("half", "half", "", 202 ),
  ("heaviside", "heaviside", "", 205 ),
  ("histogram", "histogram", "", 206 ),
  ("histogram2d", "histogram2d", "", 207 ),
  ("histogram_bin_edges", "histogram_bin_edges", "", 208 ),
  ("hsplit", "hsplit", "", 210 ),
  ("hstack", "hstack", "", 211 ),
  ("hypot", "hypot", "", 212 ),
  ("identity", "identity", "", 214 ),
  ("imag", "imag", "", 216 ),
  ("in1d", "in1d", "", 217 ),
  ("indices", "indices", "", 218 ),
  ("inexact", "inexact", "", 219 ),
  ("insert", "insert", "", 222 ),
  ("int", "int", "", 223 ),
  ("integer", "integer", "", 231 ),
  ("interp", "interp", "", 232 ),
  ("intersect1d", "intersect1d", "", 233 ),
  ("intp", "intp", "", 234 ),
  ("invert", "invert", "", 235 ),
  ("isclose", "isclose", "", 239 ),
  ("iscomplex", "iscomplex", "", 240 ),
  ("isfinite", "isfinite", "", 242 ),
  ("lcm", "lcm", "", 261 ),
  ("ldexp", "ldexp", "", 262 ),
  ("less", "less", "", 264 ),
  ("less_equal", "less_equal", "", 265 ),
  ("linspace", "linspace", "", 267 ),
  ("load", "load", "", 268 ),
  ("loads", "loads", "", 269 ),
  ("loadtxt", "loadtxt", "", 270 ),
  ("log", "log", "", 271 ),
  ("log10", "log10", "", 272 ),
  ("log1p", "log1p", "", 273 ),
  ("log2", "log2", "", 274 ),
  ("logical_and", "logical_and", "", 277 ),
  ("logical_not", "logical_not", "", 278 ),
  ("logical_or", "logical_or", "", 279 ),
  ("logical_xor", "logical_xor", "", 280 ),
  ("logspace", "logspace", "", 281 ),
  ("mask_indices", "mask_indices", "", 289 ),
  ("mat", "mat", "", 290 ),
  ("matmul", "matmul", "", 291 ),
  ("matrix", "matrix", "", 292 ),
  ("max", "max", "", 293 ),
  ("maximum", "maximum", "", 294 ),
  ("maximum_sctype", "maximum_sctype", "", 295 ),
  ("mean", "mean", "", 297 ),
  ("median", "median", "", 298 ),
  ("memmap", "memmap", "", 299 ),
  ("meshgrid", "meshgrid", "", 300 ),
  ("min", "min", "", 301 ),
  ("min_scalar_type", "min_scalar_type", "", 302 ),
  ("minimum", "minimum", "", 303 ),
  ("mintypecode", "mintypecode", "", 304 ),
  ("mirr", "mirr", "", 305 ),
  ("mod", "mod", "", 306 ),
  ("modf", "modf", "", 307 ),
  ("moveaxis", "moveaxis", "", 308 ),
  ("msort", "msort", "", 309 ),
  ("multiply", "multiply", "", 310 ),
  ("ndarray", "ndarray", "", 326 ),
  ("ndenumerate", "ndenumerate", "", 327 ),
  ("ndfromtxt", "ndfromtxt", "", 328 ),
  ("ndim", "ndim", "", 329 ),
  ("ndindex", "ndindex", "", 330 ),
  ("nditer", "nditer", "", 331 ),
  ("negative", "negative", "", 332 ),
  ("nested_iters", "nested_iters", "", 333 ),
  ("nextafter", "nextafter", "", 334 ),
  ("nonzero", "nonzero", "", 335 ),
  ("not_equal", "not_equal", "", 336 ),
  ("nper", "nper", "", 337 ),
  ("npv", "npv", "", 338 ),
  ("number", "number", "", 339 ),
  ("ones", "ones", "", 344 ),
  ("ones_like", "ones_like", "", 345 ),
  ("outer", "outer", "", 346 ),
  ("pad", "pad", "", 348 ),
  ("partition", "partition", "", 349 ),
  ("percentile", "percentile", "", 350 ),
  ("piecewise", "piecewise", "", 351 ),
  ("place", "place", "", 352 ),
  ("pmt", "pmt", "", 353 ),
  ("poly", "poly", "", 354 ),
  ("poly1d", "poly1d", "", 355 ),
  ("polyadd", "polyadd", "", 356 ),
  ("polyder", "polyder", "", 357 ),
  ("polydiv", "polydiv", "", 358 ),
  ("polyfit", "polyfit", "", 359 ),
  ("polyint", "polyint", "", 360 ),
  ("polymul", "polymul", "", 361 ),
  ("polysub", "polysub", "", 362 ),
  ("polyval", "polyval", "", 363 ),
  ("positive", "positive", "", 364 ),
  ("power", "power", "", 365 ),
  ("ppmt", "ppmt", "", 366 ),
  ("printoptions", "printoptions", "", 367 ),
  ("prod", "prod", "", 368 ),
  ("product", "product", "", 369 ),
  ("promote_types", "promote_types", "", 370 ),
  ("ptp", "ptp", "", 371 ),
  ("put", "put", "", 372 ),
  ("put_along_axis", "put_along_axis", "", 373 ),
  ("putmask", "putmask", "", 374 ),
  ("pv", "pv", "", 375 ),
  ("quantile", "quantile", "", 376 ),
  ("rad2deg", "rad2deg", "", 377 ),
  ("radians", "radians", "", 378 ),
  ("real", "real", "", 382 ),
  ("record", "record", "", 388 ),
  ("repeat", "repeat", "", 390 ),
  ("require", "require", "", 391 ),
  ("reshape", "reshape", "", 392 ),
  ("resize", "resize", "", 393 ),
  ("rint", "rint", "", 396 ),
  ("roll", "roll", "", 397 ),
  ("rollaxis", "rollaxis", "", 398 ),
  ("roots", "roots", "", 399 ),
  ("rot90", "rot90", "", 400 ),
  ("round", "round", "", 401 ),
  ("round_", "round_", "", 402 ),
  ("row_stack", "row_stack", "", 403 ),
  ("safe_eval", "safe_eval", "", 404 ),
  ("save", "save", "", 405 ),
  ("savetxt", "savetxt", "", 406 ),
  ("savez", "savez", "", 407 ),
  ("savez_compressed", "savez_compressed", "", 408 ),
  ("select", "select", "", 411 ),
  ("shape", "shape", "", 421 ),
  ("shares_memory", "shares_memory", "", 422 ),
  ("short", "short", "", 423 ),
  ("show_config", "show_config", "", 424 ),
  ("sign", "sign", "", 425 ),
  ("signbit", "signbit", "", 426 ),
  ("signedinteger", "signedinteger", "", 427 ),
  ("sin", "sin", "", 428 ),
  ("sinc", "sinc", "", 429 ),
  ("single", "single", "", 430 ),
  ("singlecomplex", "singlecomplex", "", 431 ),
  ("sinh", "sinh", "", 432 ),
  ("size", "size", "", 433 ),
  ("sometrue", "sometrue", "", 434 ),
  ("sort", "sort", "", 435 ),
  ("sort_complex", "sort_complex", "", 436 ),
  ("source", "source", "", 437 ),
  ("spacing", "spacing", "", 438 ),
  ("split", "split", "", 439 ),
  ("sqrt", "sqrt", "", 440 ),
  ("square", "square", "", 441 ),
  ("squeeze", "squeeze", "", 442 ),
  ("stack", "stack", "", 443 ),
  ("std", "std", "", 444 ),
  ("str", "str", "", 445 ),
  ("subtract", "subtract", "", 449 ),
  ("sum", "sum", "", 450 ),
  ("take", "take", "", 452 ),
  ("take_along_axis", "take_along_axis", "", 453 ),
  ("tan", "tan", "", 454 ),
  ("tanh", "tanh", "", 455 ),
  ("tensordot", "tensordot", "", 456 ),
  ("test", "test", "", 457 ),
  ("tile", "tile", "", 458 ),
  ("trace", "trace", "", 460 ),
  ("transpose", "transpose", "", 461 ),
  ("trapz", "trapz", "", 462 ),
  ("tri", "tri", "", 463 ),
  ("tril", "tril", "", 464 ),
  ("tril_indices", "tril_indices", "", 465 ),
  ("tril_indices_from", "tril_indices_from", "", 466 ),
  ("trim_zeros", "trim_zeros", "", 467 ),
  ("triu", "triu", "", 468 ),
  ("triu_indices", "triu_indices", "", 469 ),
  ("triu_indices_from", "triu_indices_from", "", 470 ),
  ("true_divide", "true_divide", "", 471 ),
  ("trunc", "trunc", "", 472 ),
  ("typename", "typename", "", 473 ),
  ("unicode", "unicode", "", 485 ),
  ("unique", "unique", "", 488 ),
  ("unwrap", "unwrap", "", 492 ),
  ("vander", "vander", "", 494 ),
  ("vdot", "vdot", "", 496 ),
  ("vsplit", "vsplit", "", 500 ),
  ("vstack", "vstack", "", 501 ),
  ("where", "where", "", 502 ),
  ("zeros", "zeros", "", 504 ),
]


class Numpy(bpy.types.Node, ScinodeTreeNode):
    bl_idname = 'Numpy'
    dtype = 'Numpy'
    bl_label = "Numpy"

    function: bpy.props.EnumProperty(
        name="function",
        description="function.",
        items=func_items,
        default='linspace',
        update=update_sockets,
    )

    int: bpy.props.BoolProperty(
        name="int",
        description="Is integer.",
        default=False,
        update=update_sockets,
        )

    properties = ["function", "int"]

    def init(self, context):
        if self.function in ['linspace']:
            self.inputs.new("ScinodeSocketFloat", "start")
            self.inputs.new("ScinodeSocketFloat", "stop")
            self.inputs.new("ScinodeSocketInt", "num")
            self.args = "start, stop, num"
        elif self.function in ['arange']:
            if self.int:
                self.inputs.new("ScinodeSocketInt", "start")
                self.inputs.new("ScinodeSocketInt", "stop")
                self.inputs.new("ScinodeSocketInt", "step")
            else:
                self.inputs.new("ScinodeSocketFloat", "start")
                self.inputs.new("ScinodeSocketFloat", "stop")
                self.inputs.new("ScinodeSocketFloat", "step")
            self.args = "start, stop, step"
        elif self.function in ['argmin', 'argmax']:
            self.inputs.new("ScinodeSocketGeneral", "a")
            self.inputs.new("ScinodeSocketInt", "axis")
            self.args = "a"
            self.kwargs = "axis"
        elif self.function in ['sin', 'cos']:
            self.inputs.new("ScinodeSocketFloat", "x")
            self.args = "x"
        elif self.function in [
                "multiply",
                "divide",
                "power",
                "substract",
                "mod",
                "greater",
                "less",
                "add",
                ]:
            self.inputs.new("ScinodeSocketFloat", "x1")
            self.inputs.new("ScinodeSocketFloat", "x2")
            self.args = "x1, x2"
        else:
            self.inputs.new("ScinodeSocketFloat", "x")
            self.args = "x"
        self.outputs.new("ScinodeSocketGeneral", "Result")

    def draw_buttons(self, context, layout):
        layout.prop(self, "function", text="")
        layout.prop(self, "int", text="int")

    def get_executor(self):
        return {"path": "numpy",
                "name": self.function,
                "type": "function",
                }
